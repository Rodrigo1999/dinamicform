{"version":3,"file":"react-toastify.cjs.production.min.js","sources":["../src/utils/propValidator.ts","../src/utils/constant.ts","../src/utils/collapseToast.ts","../src/utils/cssTransition.tsx","../src/core/eventManager.ts","../src/hooks/useKeeper.ts","../src/hooks/toastContainerReducer.ts","../src/hooks/useToastContainer.ts","../src/hooks/useToast.ts","../src/components/CloseButton.tsx","../src/components/ProgressBar.tsx","../src/components/Toast.tsx","../src/components/Transitions.tsx","../src/components/ToastPositioner.tsx","../src/components/ToastContainer.tsx","../src/core/toast.tsx"],"sourcesContent":["import { isValidElement } from 'react';\n\nimport { Id } from '../types';\n\nexport function isNum(v: any): v is Number {\n  return typeof v === 'number' && !isNaN(v);\n}\n\nexport function isBool(v: any): v is Boolean {\n  return typeof v === 'boolean';\n}\n\nexport function isStr(v: any): v is String {\n  return typeof v === 'string';\n}\n\nexport function isFn(v: any): v is Function {\n  return typeof v === 'function';\n}\n\nexport function parseClassName(v: any) {\n  return isStr(v) || isFn(v) ? v : null;\n}\n\nexport function objectValues<T>(obj: Record<string, T>) {\n  return Object.keys(obj).map(key => obj[key]);\n}\n\nexport function hasToastId(toastId?: Id) {\n  return toastId === 0 || toastId;\n}\n\nexport function getAutoCloseDelay(\n  toastAutoClose?: false | number,\n  containerAutoClose?: false | number\n) {\n  return toastAutoClose === false ||\n    (isNum(toastAutoClose) && toastAutoClose > 0)\n    ? toastAutoClose\n    : containerAutoClose;\n}\n\nexport const canUseDom = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nexport function canBeRendered<T>(content: T): boolean {\n  return (\n    isValidElement(content) || isStr(content) || isFn(content) || isNum(content)\n  );\n}\n","import { ToastPosition, TypeOptions } from '../types';\n\ntype KeyOfPosition =\n  | 'TOP_LEFT'\n  | 'TOP_RIGHT'\n  | 'TOP_CENTER'\n  | 'BOTTOM_LEFT'\n  | 'BOTTOM_RIGHT'\n  | 'BOTTOM_CENTER';\n\ntype KeyOfType = 'INFO' | 'SUCCESS' | 'WARNING' | 'ERROR' | 'DEFAULT' | 'DARK';\n\nexport const POSITION: { [key in KeyOfPosition]: ToastPosition } = {\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right',\n  TOP_CENTER: 'top-center',\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  BOTTOM_CENTER: 'bottom-center'\n};\n\nexport const TYPE: { [key in KeyOfType]: TypeOptions } = {\n  INFO: 'info',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ERROR: 'error',\n  DEFAULT: 'default',\n  DARK: 'dark'\n};\n\nexport const enum DEFAULT {\n  COLLAPSE_DURATION = 300,\n  DEBOUNCE_DURATION = 50,\n  CSS_NAMESPACE = 'Toastify'\n}\n","import { DEFAULT } from './constant';\n\n/**\n * Used to collapse toast after exit animation\n */\nexport function collapseToast(\n  node: HTMLElement,\n  done: () => void,\n  duration = DEFAULT.COLLAPSE_DURATION\n) {\n  const height = node.scrollHeight;\n  const style = node.style;\n\n  requestAnimationFrame(() => {\n    style.minHeight = 'initial';\n    style.height = height + 'px';\n    style.transition = `all ${duration}ms`;\n\n    requestAnimationFrame(() => {\n      style.height = '0';\n      style.padding = '0';\n      style.margin = '0';\n      setTimeout(() => done(), duration as number);\n    });\n  });\n}\n","import * as React from 'react';\nimport { Transition } from 'react-transition-group';\nimport { ToastTransitionProps } from '../types';\n\nimport { collapseToast } from './collapseToast';\nimport { DEFAULT } from './constant';\n\nexport interface CSSTransitionProps {\n  /**\n   * Css class to apply when toast enter\n   */\n  enter: string;\n\n  /**\n   * Css class to apply when toast leave\n   */\n  exit: string;\n\n  /**\n   * Define the duration of the transition in ms\n   * You can also pass an array `[enterDuration, exitDuration]`\n   * `Default: 750`\n   */\n  duration?: number | [number, number];\n\n  /**\n   * Append current toast position to the classname.\n   * For instance `myclass--top-center`...\n   * `Default: false`\n   */\n  appendPosition?: boolean;\n\n  /**\n   * Collapse toast smoothly when animation end\n   * `Default: true`\n   */\n  collapse?: boolean;\n\n  /**\n   * Collapse transition duration\n   * `Default: 300`\n   */\n  collapseDuration?: number;\n}\n\nexport function cssTransition({\n  enter,\n  exit,\n  duration = 750,\n  appendPosition = false,\n  collapse = true,\n  collapseDuration = DEFAULT.COLLAPSE_DURATION\n}: CSSTransitionProps) {\n  let enterDuration: number, exitDuration: number;\n\n  if (Array.isArray(duration) && duration.length === 2) {\n    [enterDuration, exitDuration] = duration;\n  } else {\n    enterDuration = exitDuration = duration as number;\n  }\n\n  return function ToastTransition({\n    children,\n    position,\n    preventExitTransition,\n    done,\n    ...props\n  }: ToastTransitionProps) {\n    const enterClassName = appendPosition ? `${enter}--${position}` : enter;\n    const exitClassName = appendPosition ? `${exit}--${position}` : exit;\n\n    const onEnter = () => {\n      const node = props.nodeRef.current;\n      if (node) {\n        node.classList.add(enterClassName);\n        node.style.animationFillMode = 'forwards';\n        node.style.animationDuration = `${enterDuration}ms`;\n      }\n    };\n\n    const onEntered = () => {\n      const node = props.nodeRef.current;\n      if (node) {\n        node.classList.remove(enterClassName);\n        node.style.removeProperty('animationFillMode');\n        node.style.removeProperty('animationDuration');\n      }\n    };\n\n    const onExited = () => {\n      const node = props.nodeRef.current;\n\n      if (node) {\n        node.removeEventListener('animationend', onExited);\n        collapse ? collapseToast(node, done, collapseDuration) : done();\n      }\n    };\n\n    const onExit = () => {\n      const node = props.nodeRef.current;\n      if (node) {\n        node.classList.add(exitClassName);\n        node.style.animationFillMode = 'forwards';\n        node.style.animationDuration = `${exitDuration}ms`;\n        node.addEventListener('animationend', onExited);\n      }\n    };\n\n    return (\n      <Transition\n        {...props}\n        timeout={\n          preventExitTransition\n            ? collapse\n              ? collapseDuration\n              : DEFAULT.DEBOUNCE_DURATION\n            : {\n                enter: enterDuration,\n                exit: collapse\n                  ? exitDuration + collapseDuration\n                  : exitDuration + DEFAULT.DEBOUNCE_DURATION\n              }\n        }\n        onEnter={onEnter}\n        onEntered={onEntered}\n        onExit={preventExitTransition ? onExited : onExit}\n        unmountOnExit\n      >\n        {children}\n      </Transition>\n    );\n  };\n}\n","import {\n  Id,\n  ToastContent,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\nexport const enum Event {\n  Show,\n  Clear,\n  DidMount,\n  WillUnmount,\n  Change,\n  ClearWaitingQueue\n}\n\ntype OnShowCallback = (\n  content: ToastContent,\n  options: NotValidatedToastProps\n) => void;\ntype OnClearCallback = (id?: Id) => void;\ntype OnClearWaitingQueue = (params: ClearWaitingQueueParams) => void;\ntype OnDidMountCallback = (containerInstance: ContainerInstance) => void;\ntype OnWillUnmountCallback = OnDidMountCallback;\nexport type OnChangeCallback = (\n  toast: number,\n  containerId?: number | string\n) => void;\ntype Callback =\n  | OnShowCallback\n  | OnClearCallback\n  | OnClearWaitingQueue\n  | OnDidMountCallback\n  | OnWillUnmountCallback\n  | OnChangeCallback;\ntype TimeoutId = ReturnType<typeof window.setTimeout>;\n\nexport interface EventManager {\n  list: Map<Event, Callback[]>;\n  emitQueue: Map<Event, TimeoutId[]>;\n  on(event: Event.Show, callback: OnShowCallback): EventManager;\n  on(event: Event.Clear, callback: OnClearCallback): EventManager;\n  on(\n    event: Event.ClearWaitingQueue,\n    callback: OnClearWaitingQueue\n  ): EventManager;\n  on(event: Event.DidMount, callback: OnDidMountCallback): EventManager;\n  on(event: Event.WillUnmount, callback: OnWillUnmountCallback): EventManager;\n  on(event: Event.Change, callback: OnChangeCallback): EventManager;\n  off(event: Event, callback?: Callback): EventManager;\n  cancelEmit(event: Event): EventManager;\n  emit(\n    event: Event.Show,\n    content: React.ReactNode,\n    options: NotValidatedToastProps\n  ): void;\n  emit(event: Event.Clear, id?: string | number): void;\n  emit(event: Event.ClearWaitingQueue, params: ClearWaitingQueueParams): void;\n  emit(event: Event.DidMount, containerInstance: ContainerInstance): void;\n  emit(event: Event.WillUnmount, containerInstance: ContainerInstance): void;\n  emit(event: Event.Change, toast: number, containerId?: number | string): void;\n}\n\nexport const eventManager: EventManager = {\n  list: new Map(),\n  emitQueue: new Map(),\n\n  on(event: Event, callback: Callback) {\n    this.list.has(event) || this.list.set(event, []);\n    this.list.get(event)!.push(callback);\n    return this;\n  },\n\n  off(event, callback) {\n    if (callback) {\n      const cb = this.list.get(event)!.filter(cb => cb !== callback);\n      this.list.set(event, cb);\n      return this;\n    }\n    this.list.delete(event);\n    return this;\n  },\n\n  cancelEmit(event) {\n    const timers = this.emitQueue.get(event);\n    if (timers) {\n      timers.forEach((timer: TimeoutId) => clearTimeout(timer));\n      this.emitQueue.delete(event);\n    }\n\n    return this;\n  },\n\n  /**\n   * Enqueue the event at the end of the call stack\n   * Doing so let the user call toast as follow:\n   * toast('1')\n   * toast('2')\n   * toast('3')\n   * Without setTimemout the code above will not work\n   */\n  emit(event: Event, ...args: any[]) {\n    this.list.has(event) &&\n      this.list.get(event)!.forEach((callback: Callback) => {\n        const timer = setTimeout(() => {\n          // @ts-ignore\n          callback(...args);\n        }, 0);\n\n        this.emitQueue.has(event) || this.emitQueue.set(event, []);\n        this.emitQueue.get(event)!.push(timer);\n      });\n  }\n};\n","import { useRef, useEffect } from 'react';\n\n/**\n * `useKeeper` is a helper around `useRef`.\n *\n * You don't need to access the `.current`property to get the value\n * If refresh is set to true. The ref will be updated every render\n */\nexport function useKeeper<T>(arg: T, refresh = false) {\n  const ref = useRef<T>(arg);\n\n  useEffect(() => {\n    if (refresh) ref.current = arg;\n  });\n\n  return ref.current;\n}\n","import { Id } from '../types';\n\nimport { hasToastId } from '../utils';\n\nexport type State = Array<Id>;\nexport type Action =\n  | { type: 'ADD'; toastId: Id; staleId?: Id }\n  | { type: 'REMOVE'; toastId?: Id };\n\nexport function reducer(state: State, action: Action) {\n  switch (action.type) {\n    case 'ADD':\n      return [...state, action.toastId].filter(id => id !== action.staleId);\n    case 'REMOVE':\n      return hasToastId(action.toastId)\n        ? state.filter(id => id !== action.toastId)\n        : [];\n  }\n}\n","import {\n  useEffect,\n  useRef,\n  useReducer,\n  cloneElement,\n  isValidElement\n} from 'react';\nimport {\n  parseClassName,\n  canBeRendered,\n  isBool,\n  isFn,\n  isNum,\n  isStr,\n  hasToastId,\n  getAutoCloseDelay\n} from '../utils';\nimport { eventManager, Event } from '../core/eventManager';\n\nimport {\n  Id,\n  ToastContainerProps,\n  ToastProps,\n  ToastContent,\n  Toast,\n  ToastPosition,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  ToastTransition\n} from '../types';\nimport { useKeeper } from './useKeeper';\nimport { reducer } from './toastContainerReducer';\n\ntype CollectionItem = Record<Id, Toast>;\ntype ToastToRender = Partial<Record<ToastPosition, Toast[]>>;\n\ninterface QueuedToast {\n  toastContent: ToastContent;\n  toastProps: ToastProps;\n  staleId?: Id;\n}\n\nexport interface ContainerInstance {\n  toastKey: number;\n  displayedToast: number;\n  props: ToastContainerProps;\n  containerId?: Id | null;\n  isToastActive: (toastId: Id) => boolean;\n  getToast: (id: Id) => Toast | null;\n}\n\nexport function useToastContainer(props: ToastContainerProps) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const [toast, dispatch] = useReducer(reducer, []);\n  const containerRef = useRef(null);\n  let toastCount = useKeeper(0);\n  let queue = useKeeper<QueuedToast[]>([]);\n  const collection = useKeeper<CollectionItem>({});\n  const instance = useKeeper<ContainerInstance>({\n    toastKey: 1,\n    displayedToast: 0,\n    props,\n    containerId: null,\n    isToastActive: isToastActive,\n    getToast: id => collection[id] || null\n  });\n\n  useEffect(() => {\n    instance.containerId = props.containerId;\n    eventManager\n      .cancelEmit(Event.WillUnmount)\n      .on(Event.Show, buildToast)\n      .on(Event.Clear, toastId => containerRef.current && removeToast(toastId))\n      .on(Event.ClearWaitingQueue, clearWaitingQueue)\n      .emit(Event.DidMount, instance);\n\n    return () => eventManager.emit(Event.WillUnmount, instance);\n  }, []);\n\n  useEffect(() => {\n    instance.isToastActive = isToastActive;\n    instance.displayedToast = toast.length;\n    eventManager.emit(Event.Change, toast.length, props.containerId);\n  }, [toast]);\n\n  useEffect(() => {\n    instance.props = props;\n  });\n\n  function isToastActive(id: Id) {\n    return toast.indexOf(id) !== -1;\n  }\n\n  function clearWaitingQueue({ containerId }: ClearWaitingQueueParams) {\n    const { limit, enableMultiContainer } = instance.props;\n    if (\n      limit &&\n      (!containerId ||\n        (instance.containerId === containerId && enableMultiContainer))\n    ) {\n      toastCount -= queue.length;\n      queue = [];\n    }\n  }\n\n  function removeToast(toastId?: Id) {\n    const queueLen = queue.length;\n    toastCount = hasToastId(toastId)\n      ? toastCount - 1\n      : toastCount - instance.displayedToast;\n\n    if (toastCount < 0) toastCount = 0;\n\n    if (queueLen > 0) {\n      const freeSlot = hasToastId(toastId) ? 1 : instance.props.limit!;\n\n      if (queueLen === 1 || freeSlot === 1) {\n        instance.displayedToast++;\n        dequeueToast();\n      } else {\n        const toDequeue = freeSlot > queueLen ? queueLen : freeSlot;\n        instance.displayedToast = toDequeue;\n\n        for (let i = 0; i < toDequeue; i++) dequeueToast();\n      }\n    }\n    dispatch({ type: 'REMOVE', toastId });\n  }\n\n  function dequeueToast() {\n    const { toastContent, toastProps, staleId } = queue.shift() as QueuedToast;\n\n    // ensure that exit transition has been completed, hence the timeout\n    setTimeout(() => {\n      appendToast(toastContent, toastProps, staleId);\n    }, 500);\n  }\n\n  /**\n   * check if a container is attached to the dom\n   * check for multi-container, build only if associated\n   * check for duplicate toastId if no update\n   */\n  function isNotValid({\n    containerId,\n    toastId,\n    updateId\n  }: NotValidatedToastProps) {\n    return !containerRef.current ||\n      (instance.props.enableMultiContainer &&\n        containerId !== instance.props.containerId) ||\n      (instance.isToastActive(toastId) && updateId == null)\n      ? true\n      : false;\n  }\n\n  // this function and all the function called inside needs to rely on ref(`useKeeper`)\n  function buildToast(\n    content: ToastContent,\n    { delay, staleId, ...options }: NotValidatedToastProps\n  ) {\n    if (!canBeRendered(content) || isNotValid(options)) return;\n\n    const { toastId, updateId } = options;\n    const { props, isToastActive } = instance;\n    const closeToast = () => removeToast(toastId);\n    const isNotAnUpdate = !isToastActive(toastId);\n\n    if (isNotAnUpdate) toastCount++;\n\n    const toastProps: ToastProps = {\n      toastId,\n      updateId,\n      key: options.key || instance.toastKey++,\n      type: options.type,\n      closeToast: closeToast,\n      closeButton: options.closeButton,\n      rtl: props.rtl,\n      position: options.position || (props.position as ToastPosition),\n      transition: options.transition || (props.transition as ToastTransition),\n      className: parseClassName(options.className || props.toastClassName),\n      bodyClassName: parseClassName(\n        options.bodyClassName || props.bodyClassName\n      ),\n      style: options.style || props.toastStyle,\n      bodyStyle: options.bodyStyle || props.bodyStyle,\n      onClick: options.onClick || props.onClick,\n      pauseOnHover: isBool(options.pauseOnHover)\n        ? options.pauseOnHover\n        : props.pauseOnHover,\n      pauseOnFocusLoss: isBool(options.pauseOnFocusLoss)\n        ? options.pauseOnFocusLoss\n        : props.pauseOnFocusLoss,\n      draggable: isBool(options.draggable)\n        ? options.draggable\n        : props.draggable,\n      draggablePercent: isNum(options.draggablePercent)\n        ? options.draggablePercent\n        : (props.draggablePercent as number),\n      closeOnClick: isBool(options.closeOnClick)\n        ? options.closeOnClick\n        : props.closeOnClick,\n      progressClassName: parseClassName(\n        options.progressClassName || props.progressClassName\n      ),\n      progressStyle: options.progressStyle || props.progressStyle,\n      autoClose: getAutoCloseDelay(options.autoClose, props.autoClose),\n      hideProgressBar: isBool(options.hideProgressBar)\n        ? options.hideProgressBar\n        : props.hideProgressBar,\n      progress: options.progress,\n      role: isStr(options.role) ? options.role : props.role,\n      deleteToast() {\n        removeFromCollection(toastId);\n      }\n    };\n\n    if (isFn(options.onOpen)) toastProps.onOpen = options.onOpen;\n    if (isFn(options.onClose)) toastProps.onClose = options.onClose;\n\n    let closeButton = props.closeButton;\n\n    if (options.closeButton === false || canBeRendered(options.closeButton)) {\n      closeButton = options.closeButton;\n    } else if (options.closeButton === true) {\n      closeButton = canBeRendered(props.closeButton) ? props.closeButton : true;\n    }\n\n    toastProps.closeButton = closeButton;\n\n    let toastContent = content;\n\n    if (isValidElement(content) && !isStr(content.type)) {\n      toastContent = cloneElement(content, {\n        closeToast,\n        toastProps\n      });\n    } else if (isFn(content)) {\n      toastContent = content({ closeToast, toastProps });\n    }\n\n    // not handling limit + delay by design. Waiting for user feedback first\n    if (\n      props.limit &&\n      props.limit > 0 &&\n      toastCount > props.limit &&\n      isNotAnUpdate\n    ) {\n      queue.push({ toastContent, toastProps, staleId });\n    } else if (isNum(delay) && (delay as number) > 0) {\n      setTimeout(() => {\n        appendToast(toastContent, toastProps, staleId);\n      }, delay);\n    } else {\n      appendToast(toastContent, toastProps, staleId);\n    }\n  }\n\n  function appendToast(\n    content: ToastContent,\n    toastProps: ToastProps,\n    staleId?: Id\n  ) {\n    const { toastId } = toastProps;\n\n    collection[toastId] = {\n      content,\n      props: toastProps\n    };\n    dispatch({\n      type: 'ADD',\n      toastId,\n      staleId\n    });\n  }\n\n  function removeFromCollection(toastId: Id) {\n    delete collection[toastId];\n    forceUpdate();\n  }\n\n  function getToastToRender<T>(\n    cb: (position: ToastPosition, toastList: Toast[]) => T\n  ) {\n    const toastToRender: ToastToRender = {};\n    const toastList = props.newestOnTop\n      ? Object.keys(collection).reverse()\n      : Object.keys(collection);\n\n    for (let i = 0; i < toastList.length; i++) {\n      const toast = collection[toastList[i]];\n      const { position } = toast.props;\n      toastToRender[position] || (toastToRender[position] = []);\n\n      toastToRender[position]!.push(toast);\n    }\n\n    return (Object.keys(toastToRender) as Array<ToastPosition>).map(p =>\n      cb(p, toastToRender[p]!)\n    );\n  }\n\n  return {\n    getToastToRender,\n    collection,\n    containerRef,\n    isToastActive\n  };\n}\n","import {\n  useState,\n  useRef,\n  useEffect,\n  isValidElement,\n  DOMAttributes\n} from 'react';\n\nimport { isFn } from '../utils';\nimport { ToastProps } from '../types';\nimport { useKeeper } from './useKeeper';\n\ninterface Draggable {\n  start: number;\n  x: number;\n  y: number;\n  deltaX: number;\n  removalDistance: number;\n  canCloseOnClick: boolean;\n  canDrag: boolean;\n  boundingRect: DOMRect | null;\n}\n\ntype DragEvent = MouseEvent & TouchEvent;\n\nfunction getX(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientX\n    : e.clientX;\n}\n\nfunction getY(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientY\n    : e.clientY;\n}\n\nexport function useToast(props: ToastProps) {\n  const [isRunning, setIsRunning] = useState(true);\n  const [preventExitTransition, setPreventExitTransition] = useState(false);\n  const toastRef = useRef<HTMLDivElement>(null);\n  const drag = useKeeper<Draggable>({\n    start: 0,\n    x: 0,\n    y: 0,\n    deltaX: 0,\n    removalDistance: 0,\n    canCloseOnClick: true,\n    canDrag: false,\n    boundingRect: null\n  });\n  const syncProps = useKeeper(props, true);\n  const { autoClose, pauseOnHover, closeToast, onClick, closeOnClick } = props;\n\n  useEffect(() => {\n    if (isFn(props.onOpen))\n      props.onOpen(isValidElement(props.children) && props.children.props);\n\n    return () => {\n      if (isFn(syncProps.onClose))\n        syncProps.onClose(\n          isValidElement(syncProps.children) && syncProps.children.props\n        );\n    };\n  }, []);\n\n  useEffect(() => {\n    props.draggable && bindDragEvents();\n    return () => {\n      props.draggable && unbindDragEvents();\n    };\n  }, [props.draggable]);\n\n  useEffect(() => {\n    props.pauseOnFocusLoss && bindFocusEvents();\n    return () => {\n      props.pauseOnFocusLoss && unbindFocusEvents();\n    };\n  }, [props.pauseOnFocusLoss]);\n\n  function onDragStart(\n    e: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent<HTMLElement>\n  ) {\n    const toast = toastRef.current!;\n    drag.canCloseOnClick = true;\n    drag.canDrag = true;\n    drag.boundingRect = toast.getBoundingClientRect();\n    toast.style.transition = '';\n    drag.start = drag.x = getX(e.nativeEvent as DragEvent);\n    drag.removalDistance = toast.offsetWidth * (props.draggablePercent / 100);\n  }\n\n  function onDragTransitionEnd() {\n    if (drag.boundingRect) {\n      const { top, bottom, left, right } = drag.boundingRect;\n\n      if (\n        props.pauseOnHover &&\n        drag.x >= left &&\n        drag.x <= right &&\n        drag.y >= top &&\n        drag.y <= bottom\n      ) {\n        pauseToast();\n      } else {\n        playToast();\n      }\n    }\n  }\n\n  function playToast() {\n    setIsRunning(true);\n  }\n\n  function pauseToast() {\n    setIsRunning(false);\n  }\n\n  function bindFocusEvents() {\n    window.addEventListener('focus', playToast);\n    window.addEventListener('blur', pauseToast);\n  }\n\n  function unbindFocusEvents() {\n    window.removeEventListener('focus', playToast);\n    window.removeEventListener('blur', pauseToast);\n  }\n\n  function bindDragEvents() {\n    document.addEventListener('mousemove', onDragMove);\n    document.addEventListener('mouseup', onDragEnd);\n\n    document.addEventListener('touchmove', onDragMove);\n    document.addEventListener('touchend', onDragEnd);\n  }\n\n  function unbindDragEvents() {\n    document.removeEventListener('mousemove', onDragMove);\n    document.removeEventListener('mouseup', onDragEnd);\n\n    document.removeEventListener('touchmove', onDragMove);\n    document.removeEventListener('touchend', onDragEnd);\n  }\n\n  function onDragMove(e: MouseEvent | TouchEvent) {\n    e.preventDefault();\n\n    const toast = toastRef.current!;\n\n    if (drag.canDrag) {\n      if (isRunning) pauseToast();\n\n      drag.x = getX(e as DragEvent);\n      drag.deltaX = drag.x - drag.start;\n      drag.y = getY(e as DragEvent);\n\n      // prevent false positif during a toast click\n      if (drag.start !== drag.x) drag.canCloseOnClick = false;\n\n      toast.style.transform = `translateX(${drag.deltaX}px)`;\n      toast.style.opacity = `${1 -\n        Math.abs(drag.deltaX / drag.removalDistance)}`;\n    }\n  }\n\n  function onDragEnd() {\n    const toast = toastRef.current!;\n    if (drag.canDrag) {\n      drag.canDrag = false;\n\n      if (Math.abs(drag.deltaX) > drag.removalDistance) {\n        setPreventExitTransition(true);\n        props.closeToast();\n        return;\n      }\n\n      toast.style.transition = 'transform 0.2s, opacity 0.2s';\n      toast.style.transform = 'translateX(0)';\n      toast.style.opacity = '1';\n    }\n  }\n\n  const eventHandlers: DOMAttributes<HTMLElement> = {\n    onMouseDown: onDragStart,\n    onTouchStart: onDragStart,\n    onMouseUp: onDragTransitionEnd,\n    onTouchEnd: onDragTransitionEnd\n  };\n\n  if (autoClose && pauseOnHover) {\n    eventHandlers.onMouseEnter = pauseToast;\n    eventHandlers.onMouseLeave = playToast;\n  }\n\n  // prevent toast from closing when user drags the toast\n  if (closeOnClick) {\n    eventHandlers.onClick = (e: React.MouseEvent) => {\n      onClick && onClick(e);\n      drag.canCloseOnClick && closeToast();\n    };\n  }\n\n  return {\n    playToast,\n    pauseToast,\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  };\n}\n","import * as React from 'react';\nimport { DEFAULT } from '../utils';\nimport { TypeOptions } from '../types';\n\nexport interface CloseButtonProps {\n  closeToast: (e: React.MouseEvent<HTMLElement>) => void;\n  type: TypeOptions;\n  ariaLabel?: string;\n}\n\nexport function CloseButton({\n  closeToast,\n  type,\n  ariaLabel = 'close'\n}: CloseButtonProps) {\n  return (\n    <button\n      className={`${DEFAULT.CSS_NAMESPACE}__close-button ${DEFAULT.CSS_NAMESPACE}__close-button--${type}`}\n      type=\"button\"\n      onClick={e => {\n        e.stopPropagation();\n        closeToast(e);\n      }}\n      aria-label={ariaLabel}\n    >\n      <svg aria-hidden=\"true\" viewBox=\"0 0 14 16\">\n        <path\n          fillRule=\"evenodd\"\n          d=\"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z\"\n        />\n      </svg>\n    </button>\n  );\n}\n","import * as React from 'react';\nimport cx from 'clsx';\n\nimport { TYPE, DEFAULT, isFn } from './../utils';\nimport { TypeOptions, ToastClassName } from '../types';\n\nexport interface ProgressBarProps {\n  /**\n   * The animation delay which determine when to close the toast\n   */\n  delay: number;\n\n  /**\n   * Whether or not the animation is running or paused\n   */\n  isRunning: boolean;\n\n  /**\n   * Func to close the current toast\n   */\n  closeToast: () => void;\n\n  /**\n   * Optional type : info, success ...\n   */\n  type: TypeOptions;\n\n  /**\n   * Hide or not the progress bar\n   */\n  hide?: boolean;\n\n  /**\n   * Optionnal className\n   */\n  className?: ToastClassName;\n\n  /**\n   * Optionnal inline style\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Tell wether or not controlled progress bar is used\n   */\n  controlledProgress?: boolean;\n\n  /**\n   * Controlled progress value\n   */\n  progress?: number | string;\n\n  /**\n   * Support rtl content\n   */\n  rtl?: boolean;\n\n  /**\n   * Tell if the component is visible on screen or not\n   */\n  isIn?: boolean;\n}\n\nexport function ProgressBar({\n  delay,\n  isRunning,\n  closeToast,\n  type,\n  hide,\n  className,\n  style: userStyle,\n  controlledProgress,\n  progress,\n  rtl,\n  isIn\n}: ProgressBarProps) {\n  const style: React.CSSProperties = {\n    ...userStyle,\n    animationDuration: `${delay}ms`,\n    animationPlayState: isRunning ? 'running' : 'paused',\n    opacity: hide ? 0 : 1\n  };\n\n  if (controlledProgress) style.transform = `scaleX(${progress})`;\n  const defaultClassArr = [\n    `${DEFAULT.CSS_NAMESPACE}__progress-bar`,\n    controlledProgress\n      ? `${DEFAULT.CSS_NAMESPACE}__progress-bar--controlled`\n      : `${DEFAULT.CSS_NAMESPACE}__progress-bar--animated`,\n    `${DEFAULT.CSS_NAMESPACE}__progress-bar--${type}`,\n    {\n      [`${DEFAULT.CSS_NAMESPACE}__progress-bar--rtl`]: rtl\n    }\n  ];\n  const classNames = isFn(className)\n    ? className({\n        rtl,\n        type,\n        defaultClassName: cx(...defaultClassArr)\n      })\n    : cx(...[...defaultClassArr, className]);\n\n  // 🧐 controlledProgress is derived from progress\n  // so if controlledProgress is set\n  // it means that this is also the case for progress\n  const animationEvent = {\n    [controlledProgress && progress! >= 1\n      ? 'onTransitionEnd'\n      : 'onAnimationEnd']:\n      controlledProgress && progress! < 1\n        ? null\n        : () => {\n            isIn && closeToast();\n          }\n  };\n\n  return <div className={classNames} style={style} {...animationEvent} />;\n}\n\nProgressBar.defaultProps = {\n  type: TYPE.DEFAULT,\n  hide: false\n};\n","import * as React from 'react';\nimport cx from 'clsx';\n\nimport { ProgressBar } from './ProgressBar';\nimport { ToastProps } from '../types';\nimport { DEFAULT, isFn } from '../utils';\nimport { useToast } from '../hooks';\n\nexport const Toast: React.FC<ToastProps> = props => {\n  const {\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  } = useToast(props);\n  const {\n    closeButton,\n    children,\n    autoClose,\n    onClick,\n    type,\n    hideProgressBar,\n    closeToast,\n    transition: Transition,\n    position,\n    className,\n    style,\n    bodyClassName,\n    bodyStyle,\n    progressClassName,\n    progressStyle,\n    updateId,\n    role,\n    progress,\n    rtl,\n    toastId,\n    deleteToast\n  } = props;\n  const defaultClassArr = [\n    `${DEFAULT.CSS_NAMESPACE}__toast`,\n    `${DEFAULT.CSS_NAMESPACE}__toast--${type}`,\n    {\n      [`${DEFAULT.CSS_NAMESPACE}__toast--rtl`]: rtl\n    }\n  ];\n  const cssClasses = isFn(className)\n    ? className({\n        rtl,\n        position,\n        type,\n        defaultClassName: cx(...defaultClassArr)\n      })\n    : cx(...[...defaultClassArr, className]);\n  const controlledProgress = !!progress;\n\n  function renderCloseButton(closeButton: any) {\n    if (!closeButton) return;\n\n    const props = { closeToast, type };\n    if (isFn(closeButton)) return closeButton(props);\n    if (React.isValidElement(closeButton))\n      return React.cloneElement(closeButton, props);\n  }\n\n  return (\n    <Transition\n      in={props.in!}\n      appear\n      done={deleteToast}\n      position={position}\n      preventExitTransition={preventExitTransition}\n      nodeRef={toastRef}\n    >\n      <div\n        id={toastId as string}\n        onClick={onClick}\n        className={cssClasses || undefined}\n        {...eventHandlers}\n        style={style}\n        ref={toastRef}\n      >\n        <div\n          {...(props.in && { role: role })}\n          className={\n            isFn(bodyClassName)\n              ? bodyClassName({ type })\n              : cx(`${DEFAULT.CSS_NAMESPACE}__toast-body`, bodyClassName)\n          }\n          style={bodyStyle}\n        >\n          {children}\n        </div>\n        {renderCloseButton(closeButton)}\n        {(autoClose || controlledProgress) && (\n          <ProgressBar\n            {...(updateId && !controlledProgress\n              ? { key: `pb-${updateId}` }\n              : {})}\n            rtl={rtl}\n            delay={autoClose as number}\n            isRunning={isRunning}\n            isIn={props.in}\n            closeToast={closeToast}\n            hide={hideProgressBar}\n            type={type}\n            style={progressStyle}\n            className={progressClassName}\n            controlledProgress={controlledProgress}\n            progress={progress}\n          />\n        )}\n      </div>\n    </Transition>\n  );\n};\n","import { DEFAULT, cssTransition } from '../utils';\n\nconst Bounce = cssTransition({\n  enter: `${DEFAULT.CSS_NAMESPACE}__bounce-enter`,\n  exit: `${DEFAULT.CSS_NAMESPACE}__bounce-exit`,\n  appendPosition: true\n});\n\nconst Slide = cssTransition({\n  enter: `${DEFAULT.CSS_NAMESPACE}__slide-enter`,\n  exit: `${DEFAULT.CSS_NAMESPACE}__slide-exit`,\n  duration: [450, 750],\n  appendPosition: true\n});\n\nconst Zoom = cssTransition({\n  enter: `${DEFAULT.CSS_NAMESPACE}__zoom-enter`,\n  exit: `${DEFAULT.CSS_NAMESPACE}__zoom-exit`\n});\n\nconst Flip = cssTransition({\n  enter: `${DEFAULT.CSS_NAMESPACE}__flip-enter`,\n  exit: `${DEFAULT.CSS_NAMESPACE}__flip-exit`\n});\n\nexport { Bounce, Slide, Zoom, Flip };\n","import * as React from 'react';\nimport { ToastProps } from '../types';\ntype ToastPositionerProps = Pick<ToastProps, 'style' | 'in'> & {\n  className?: string;\n};\n\nexport const ToastPositioner: React.FC<ToastPositionerProps> = ({\n  children,\n  className,\n  style,\n  ...rest\n}) => {\n  // Monkey patch react-transition-group\n  // As exit transition is broken with strict mode\n  delete rest.in;\n\n  return (\n    <div className={className} style={style}>\n      {React.Children.map(children, child =>\n        React.cloneElement(child as React.ReactElement<any>, rest)\n      )}\n    </div>\n  );\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'clsx';\n\nimport { Toast } from './Toast';\nimport { CloseButton } from './CloseButton';\nimport { Bounce } from './Transitions';\nimport {\n  POSITION,\n  DEFAULT,\n  parseClassName,\n  objectValues,\n  isFn\n} from '../utils';\nimport { useToastContainer } from '../hooks';\nimport { ToastContainerProps, ToastPosition } from '../types';\nimport { ToastPositioner } from './ToastPositioner';\n\nexport const ToastContainer: React.FC<ToastContainerProps> = props => {\n  const { getToastToRender, containerRef, isToastActive } = useToastContainer(\n    props\n  );\n  const { className, style, rtl, containerId } = props;\n\n  return (\n    <div\n      ref={containerRef}\n      className={DEFAULT.CSS_NAMESPACE as string}\n      id={containerId as string}\n    >\n      {getToastToRender((position, toastList) => {\n        const swag = {\n          className: isFn(className)\n            ? className({\n                position,\n                rtl,\n                defaultClassName: cx(\n                  `${DEFAULT.CSS_NAMESPACE}__toast-container`,\n                  `${DEFAULT.CSS_NAMESPACE}__toast-container--${position}`,\n                  { [`${DEFAULT.CSS_NAMESPACE}__toast-container--rtl`]: rtl }\n                )\n              })\n            : cx(\n                `${DEFAULT.CSS_NAMESPACE}__toast-container`,\n                `${DEFAULT.CSS_NAMESPACE}__toast-container--${position}`,\n                { [`${DEFAULT.CSS_NAMESPACE}__toast-container--rtl`]: rtl },\n                parseClassName(className)\n              ),\n          style:\n            toastList.length === 0\n              ? { ...style, pointerEvents: 'none' }\n              : { ...style }\n        } as any;\n        return (\n          <ToastPositioner {...swag} key={`container-${position}`}>\n            {toastList.map(({ content, props: toastProps }) => {\n              return (\n                <Toast\n                  {...toastProps}\n                  in={isToastActive(toastProps.toastId)}\n                  key={`toast-${toastProps.key}`}\n                  closeButton={\n                    toastProps.closeButton === true\n                      ? CloseButton\n                      : toastProps.closeButton\n                  }\n                >\n                  {content}\n                </Toast>\n              );\n            })}\n          </ToastPositioner>\n        );\n      })}\n    </div>\n  );\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  // @ts-ignore\n  ToastContainer.propTypes = {\n    // @ts-ignore\n    position: PropTypes.oneOf(objectValues(POSITION)),\n\n    // @ts-ignore\n    autoClose: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n\n    // @ts-ignore\n    closeButton: PropTypes.oneOfType([\n      PropTypes.node,\n      PropTypes.bool,\n      PropTypes.func\n    ]),\n    hideProgressBar: PropTypes.bool,\n    pauseOnHover: PropTypes.bool,\n    closeOnClick: PropTypes.bool,\n    newestOnTop: PropTypes.bool,\n    className: PropTypes.any, //oneOfType([PropTypes.func, PropTypes.string]),\n    style: PropTypes.object,\n    toastClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    bodyClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    progressClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    progressStyle: PropTypes.object,\n    transition: PropTypes.func,\n    rtl: PropTypes.bool,\n    draggable: PropTypes.bool,\n    draggablePercent: PropTypes.number,\n    pauseOnFocusLoss: PropTypes.bool,\n    enableMultiContainer: PropTypes.bool,\n    containerId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    role: PropTypes.string,\n    onClick: PropTypes.func\n  };\n}\n\nToastContainer.defaultProps = {\n  position: POSITION.TOP_RIGHT as ToastPosition,\n  transition: Bounce,\n  rtl: false,\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeButton: CloseButton,\n  pauseOnHover: true,\n  pauseOnFocusLoss: true,\n  closeOnClick: true,\n  newestOnTop: false,\n  draggable: true,\n  draggablePercent: 80,\n  role: 'alert'\n};\n","import * as React from 'react';\nimport { render } from 'react-dom';\n\nimport { POSITION, TYPE, canUseDom, isStr, isNum, isFn } from '../utils';\nimport { eventManager, OnChangeCallback, Event } from './eventManager';\nimport {\n  ToastContent,\n  ToastOptions,\n  ToastProps,\n  Id,\n  ToastContainerProps,\n  UpdateOptions,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps\n} from '../types';\nimport { ContainerInstance } from 'hooks';\nimport { ToastContainer } from '../components';\n\ninterface EnqueuedToast {\n  content: ToastContent;\n  options: NotValidatedToastProps;\n}\n\nlet containers = new Map<ContainerInstance | Id, ContainerInstance>();\nlet latestInstance: ContainerInstance | Id;\nlet containerDomNode: HTMLElement;\nlet containerConfig: ToastContainerProps;\nlet queue: EnqueuedToast[] = [];\nlet lazy = false;\n\n/**\n * Check whether any container is currently mounted in the DOM\n */\nfunction isAnyContainerMounted() {\n  return containers.size > 0;\n}\n\n/**\n * Get the container by id. Returns the last container declared when no id is given.\n */\nfunction getContainer(containerId?: Id) {\n  if (!isAnyContainerMounted()) return null;\n  return containers.get(!containerId ? latestInstance : containerId);\n}\n\n/**\n * Get the toast by id, given it's in the DOM, otherwise returns null\n */\nfunction getToast(toastId: Id, { containerId }: ToastOptions) {\n  const container = getContainer(containerId);\n  if (!container) return null;\n\n  return container.getToast(toastId);\n}\n\n/**\n * Generate a random toastId\n */\nfunction generateToastId() {\n  return (Math.random().toString(36) + Date.now().toString(36)).substr(2, 10);\n}\n\n/**\n * Generate a toastId or use the one provided\n */\nfunction getToastId(options?: ToastOptions) {\n  if (options && (isStr(options.toastId) || isNum(options.toastId))) {\n    return options.toastId;\n  }\n\n  return generateToastId();\n}\n\n/**\n * If the container is not mounted, the toast is enqueued and\n * the container lazy mounted\n */\nfunction dispatchToast(\n  content: ToastContent,\n  options: NotValidatedToastProps\n): Id {\n  if (isAnyContainerMounted()) {\n    eventManager.emit(Event.Show, content, options);\n  } else {\n    queue.push({ content, options });\n    if (lazy && canUseDom) {\n      lazy = false;\n      containerDomNode = document.createElement('div');\n      document.body.appendChild(containerDomNode);\n      render(<ToastContainer {...containerConfig} />, containerDomNode);\n    }\n  }\n\n  return options.toastId;\n}\n\n/**\n * Merge provided options with the defaults settings and generate the toastId\n */\nfunction mergeOptions(type: string, options?: ToastOptions) {\n  return {\n    ...options,\n    type: (options && options.type) || type,\n    toastId: getToastId(options)\n  } as NotValidatedToastProps;\n}\n\nconst toast = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.DEFAULT, options));\n\ntoast.success = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.SUCCESS, options));\n\ntoast.info = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.INFO, options));\n\ntoast.error = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.ERROR, options));\n\ntoast.warning = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.WARNING, options));\n\ntoast.dark = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.DARK, options));\n\n/**\n * Maybe I should remove warning in favor of warn, I don't know\n */\ntoast.warn = toast.warning;\n\n/**\n * Remove toast programmaticaly\n */\ntoast.dismiss = (id?: Id) =>\n  isAnyContainerMounted() && eventManager.emit(Event.Clear, id);\n\n/**\n * Clear waiting queue when limit is used\n */\ntoast.clearWaitingQueue = (params: ClearWaitingQueueParams = {}) =>\n  isAnyContainerMounted() && eventManager.emit(Event.ClearWaitingQueue, params);\n\n/**\n * return true if one container is displaying the toast\n */\ntoast.isActive = (id: Id) => {\n  let isToastActive = false;\n\n  containers.forEach(container => {\n    if (container.isToastActive && container.isToastActive(id)) {\n      isToastActive = true;\n    }\n  });\n\n  return isToastActive;\n};\n\ntoast.update = (toastId: Id, options: UpdateOptions = {}) => {\n  // if you call toast and toast.update directly nothing will be displayed\n  // this is why I defered the update\n  setTimeout(() => {\n    const toast = getToast(toastId, options as ToastOptions);\n    if (toast) {\n      const { props: oldOptions, content: oldContent } = toast;\n\n      const nextOptions = {\n        ...oldOptions,\n        ...options,\n        toastId: options.toastId || toastId,\n        updateId: generateToastId()\n      } as ToastProps & UpdateOptions;\n\n      if (nextOptions.toastId !== toastId) nextOptions.staleId = toastId;\n\n      const content =\n        typeof nextOptions.render !== 'undefined'\n          ? nextOptions.render\n          : oldContent;\n      delete nextOptions.render;\n\n      dispatchToast(content, nextOptions);\n    }\n  }, 0);\n};\n\n/**\n * Used for controlled progress bar.\n */\ntoast.done = (id: Id) => {\n  toast.update(id, {\n    progress: 1\n  });\n};\n\n/**\n * Track changes. The callback get the number of toast displayed\n *\n */\ntoast.onChange = (callback: OnChangeCallback) => {\n  if (isFn(callback)) {\n    eventManager.on(Event.Change, callback);\n  }\n  return () => {\n    isFn(callback) && eventManager.off(Event.Change, callback);\n  };\n};\n\n/**\n * Configure the ToastContainer when lazy mounted\n */\ntoast.configure = (config: ToastContainerProps = {}) => {\n  lazy = true;\n  containerConfig = config;\n};\n\ntoast.POSITION = POSITION;\ntoast.TYPE = TYPE;\n\n/**\n * Wait until the ToastContainer is mounted to dispatch the toast\n * and attach isActive method\n */\neventManager\n  .on(Event.DidMount, (containerInstance: ContainerInstance) => {\n    latestInstance = containerInstance.containerId || containerInstance;\n    containers.set(latestInstance, containerInstance);\n\n    queue.forEach(item => {\n      eventManager.emit(Event.Show, item.content, item.options);\n    });\n\n    queue = [];\n  })\n  .on(Event.WillUnmount, (containerInstance: ContainerInstance) => {\n    containers.delete(containerInstance.containerId || containerInstance);\n\n    if (containers.size === 0) {\n      eventManager\n        .off(Event.Show)\n        .off(Event.Clear)\n        .off(Event.ClearWaitingQueue);\n    }\n\n    if (canUseDom && containerDomNode) {\n      document.body.removeChild(containerDomNode);\n    }\n  });\n\nexport { toast };\n"],"names":["isNum","v","isNaN","isBool","isStr","isFn","parseClassName","hasToastId","toastId","canUseDom","window","document","createElement","canBeRendered","content","isValidElement","POSITION","TOP_LEFT","TOP_RIGHT","TOP_CENTER","BOTTOM_LEFT","BOTTOM_RIGHT","BOTTOM_CENTER","TYPE","INFO","SUCCESS","WARNING","ERROR","DEFAULT","DARK","collapseToast","node","done","duration","height","scrollHeight","style","requestAnimationFrame","minHeight","transition","padding","margin","setTimeout","cssTransition","enterDuration","exitDuration","enter","exit","appendPosition","collapse","collapseDuration","Array","isArray","length","children","position","preventExitTransition","props","enterClassName","exitClassName","onExited","nodeRef","current","removeEventListener","React","Transition","timeout","onEnter","classList","add","animationFillMode","animationDuration","onEntered","remove","removeProperty","onExit","addEventListener","unmountOnExit","eventManager","list","Map","emitQueue","on","event","callback","has","this","set","get","push","off","cb","filter","cancelEmit","timers","forEach","timer","clearTimeout","emit","args","_this","useKeeper","arg","refresh","ref","useRef","useEffect","reducer","state","action","type","id","staleId","useToastContainer","forceUpdate","useReducer","x","toast","dispatch","containerRef","toastCount","queue","collection","instance","toastKey","displayedToast","containerId","isToastActive","getToast","indexOf","clearWaitingQueue","limit","enableMultiContainer","removeToast","queueLen","freeSlot","dequeueToast","toDequeue","i","shift","toastContent","toastProps","appendToast","buildToast","delay","options","updateId","isNotValid","closeToast","isNotAnUpdate","toastAutoClose","containerAutoClose","key","closeButton","rtl","className","toastClassName","bodyClassName","toastStyle","bodyStyle","onClick","pauseOnHover","pauseOnFocusLoss","draggable","draggablePercent","closeOnClick","progressClassName","progressStyle","autoClose","hideProgressBar","progress","role","deleteToast","removeFromCollection","onOpen","onClose","cloneElement","getToastToRender","toastToRender","toastList","newestOnTop","Object","keys","reverse","map","p","getX","e","targetTouches","clientX","useToast","useState","isRunning","setIsRunning","setPreventExitTransition","toastRef","drag","start","y","deltaX","removalDistance","canCloseOnClick","canDrag","boundingRect","syncProps","onDragStart","getBoundingClientRect","nativeEvent","offsetWidth","onDragTransitionEnd","left","right","top","bottom","pauseToast","playToast","onDragMove","preventDefault","clientY","getY","transform","opacity","Math","abs","onDragEnd","eventHandlers","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","onMouseEnter","onMouseLeave","CloseButton","ariaLabel","stopPropagation","viewBox","fillRule","d","ProgressBar","controlledProgress","isIn","animationPlayState","hide","defaultClassArr","classNames","defaultClassName","cx","animationEvent","defaultProps","Toast","cssClasses","appear","undefined","renderCloseButton","Bounce","Slide","Zoom","Flip","ToastPositioner","rest","child","ToastContainer","swag","pointerEvents","latestInstance","containerDomNode","containerConfig","containers","lazy","isAnyContainerMounted","size","generateToastId","random","toString","Date","now","substr","getToastId","dispatchToast","body","appendChild","render","mergeOptions","success","info","error","warning","dark","warn","dismiss","params","isActive","container","update","oldContent","nextOptions","onChange","configure","config","containerInstance","item","removeChild"],"mappings":"mlBAIgBA,EAAMC,SACA,iBAANA,IAAmBC,MAAMD,YAGzBE,EAAOF,SACD,kBAANA,WAGAG,EAAMH,SACA,iBAANA,WAGAI,EAAKJ,SACC,mBAANA,WAGAK,EAAeL,UACtBG,EAAMH,IAAMI,EAAKJ,GAAKA,EAAI,cAOnBM,EAAWC,UACN,IAAZA,GAAiBA,EAanB,IAAMC,IACO,oBAAXC,SACPA,OAAOC,WACPD,OAAOC,SAASC,wBAGFC,EAAiBC,UAE7BC,iBAAeD,IAAYV,EAAMU,IAAYT,EAAKS,IAAYd,EAAMc,GCtCjE,IAAME,EAAsD,CACjEC,SAAU,WACVC,UAAW,YACXC,WAAY,aACZC,YAAa,cACbC,aAAc,eACdC,cAAe,iBAGJC,EAA4C,CACvDC,KAAM,OACNC,QAAS,UACTC,QAAS,UACTC,MAAO,QACPC,QAAS,UACTC,KAAM,iBCtBQC,EACdC,EACAC,EACAC,YAAAA,IAAAA,WAEMC,EAASH,EAAKI,aACdC,EAAQL,EAAKK,MAEnBC,uBAAsB,WACpBD,EAAME,UAAY,UAClBF,EAAMF,OAASA,EAAS,KACxBE,EAAMG,kBAAoBN,OAE1BI,uBAAsB,WACpBD,EAAMF,OAAS,IACfE,EAAMI,QAAU,IAChBJ,EAAMK,OAAS,IACfC,YAAW,kBAAMV,MAAQC,kBCuBfU,SAQVC,EAAuBC,EAP3BC,IAAAA,MACAC,IAAAA,SACAd,SAAAA,aAAW,UACXe,eAAAA,oBACAC,SAAAA,oBACAC,iBAAAA,0BAIIC,MAAMC,QAAQnB,IAAiC,IAApBA,EAASoB,QACrCT,EAA+BX,KAAhBY,EAAgBZ,MAEhCW,EAAgBC,EAAeZ,EAG1B,gBACLqB,IAAAA,SACAC,IAAAA,SACAC,IAAAA,sBACAxB,IAAAA,KACGyB,8DAEGC,EAAiBV,EAAoBF,OAAUS,EAAaT,EAC5Da,EAAgBX,EAAoBD,OAASQ,EAAaR,EAoB1Da,EAAW,SAAXA,QACE7B,EAAO0B,EAAMI,QAAQC,QAEvB/B,IACFA,EAAKgC,oBAAoB,eAAgBH,GACzCX,EAAWnB,EAAcC,EAAMC,EAAMkB,GAAoBlB,aAe3DgC,gBAACC,8BACKR,GACJS,QACEV,EACIP,EACEC,KAEF,CACEJ,MAAOF,EACPG,KAAME,EACFJ,EAAeK,EACfL,MAGZsB,QApDY,eACRpC,EAAO0B,EAAMI,QAAQC,QACvB/B,IACFA,EAAKqC,UAAUC,IAAIX,GACnB3B,EAAKK,MAAMkC,kBAAoB,WAC/BvC,EAAKK,MAAMmC,kBAAuB3B,SAgDlC4B,UA5Cc,eACVzC,EAAO0B,EAAMI,QAAQC,QACvB/B,IACFA,EAAKqC,UAAUK,OAAOf,GACtB3B,EAAKK,MAAMsC,eAAe,qBAC1B3C,EAAKK,MAAMsC,eAAe,uBAwC1BC,OAAQnB,EAAwBI,EA3BrB,eACP7B,EAAO0B,EAAMI,QAAQC,QACvB/B,IACFA,EAAKqC,UAAUC,IAAIV,GACnB5B,EAAKK,MAAMkC,kBAAoB,WAC/BvC,EAAKK,MAAMmC,kBAAuB1B,OAClCd,EAAK6C,iBAAiB,eAAgBhB,KAsBtCiB,mBAECvB,QChEIwB,EAA6B,CACxCC,KAAM,IAAIC,IACVC,UAAW,IAAID,IAEfE,YAAGC,EAAcC,eACVL,KAAKM,IAAIF,IAAUG,KAAKP,KAAKQ,IAAIJ,EAAO,SACxCJ,KAAKS,IAAIL,GAAQM,KAAKL,GACpBE,MAGTI,aAAIP,EAAOC,MACLA,EAAU,KACNO,EAAKL,KAAKP,KAAKS,IAAIL,GAAQS,QAAO,SAAAD,UAAMA,IAAOP,iBAChDL,KAAKQ,IAAIJ,EAAOQ,GACdL,iBAEJP,YAAYI,GACVG,MAGTO,oBAAWV,OACHW,EAASR,KAAKL,UAAUO,IAAIL,UAC9BW,IACFA,EAAOC,SAAQ,SAACC,UAAqBC,aAAaD,WAC7Cf,iBAAiBE,IAGjBG,MAWTY,cAAKf,qCAAiBgB,mCAAAA,yBACfpB,KAAKM,IAAIF,IACZG,KAAKP,KAAKS,IAAIL,GAAQY,SAAQ,SAACX,OACvBY,EAAQtD,YAAW,WAEvB0C,eAAYe,KACX,GAEHC,EAAKnB,UAAUI,IAAIF,IAAUiB,EAAKnB,UAAUM,IAAIJ,EAAO,IACvDiB,EAAKnB,UAAUO,IAAIL,GAAQM,KAAKO,iBCvGxBK,EAAaC,EAAQC,YAAAA,IAAAA,GAAU,OACvCC,EAAMC,SAAUH,UAEtBI,aAAU,WACJH,IAASC,EAAI1C,QAAUwC,MAGtBE,EAAI1C,iBCNG6C,EAAQC,EAAcC,UAC5BA,EAAOC,UACR,YACI,UAAIF,GAAOC,EAAOrG,UAASoF,QAAO,SAAAmB,UAAMA,IAAOF,EAAOG,eAC1D,gBACIzG,EAAWsG,EAAOrG,SACrBoG,EAAMhB,QAAO,SAAAmB,UAAMA,IAAOF,EAAOrG,WACjC,aCmCMyG,EAAkBxD,OACvByD,EAAeC,cAAW,SAAAC,UAAKA,EAAI,IAAG,QACrBD,aAAWR,EAAS,IAAvCU,OAAOC,OACRC,EAAed,SAAO,MACxBe,EAAanB,EAAU,GACvBoB,EAAQpB,EAAyB,IAC/BqB,EAAarB,EAA0B,IACvCsB,EAAWtB,EAA6B,CAC5CuB,SAAU,EACVC,eAAgB,EAChBpE,MAAAA,EACAqE,YAAa,KACbC,cAAeA,EACfC,SAAU,SAAAjB,UAAMW,EAAWX,IAAO,iBAyB3BgB,EAAchB,UACS,IAAvBM,EAAMY,QAAQlB,YAGdmB,SAAoBJ,IAAAA,cACaH,EAASlE,QAAzC0E,SAGJL,GACCH,EAASG,cAAgBA,KAJfM,wBAMbZ,GAAcC,EAAMpE,OACpBoE,EAAQ,aAIHY,EAAY7H,OACb8H,EAAWb,EAAMpE,WACvBmE,EAAajH,EAAWC,GACpBgH,EAAa,EACbA,EAAaG,EAASE,gBAET,IAAGL,EAAa,GAE7Bc,EAAW,EAAG,KACVC,EAAWhI,EAAWC,GAAW,EAAImH,EAASlE,MAAM0E,SAEzC,IAAbG,GAA+B,IAAbC,EACpBZ,EAASE,iBACTW,QACK,KACCC,EAAYF,EAAWD,EAAWA,EAAWC,EACnDZ,EAASE,eAAiBY,MAErB,IAAIC,EAAI,EAAGA,EAAID,EAAWC,IAAKF,KAGxClB,EAAS,CAAER,KAAM,SAAUtG,QAAAA,aAGpBgI,UACuCf,EAAMkB,QAA5CC,IAAAA,aAAcC,IAAAA,WAAY7B,IAAAA,QAGlCtE,YAAW,WACToG,EAAYF,EAAcC,EAAY7B,KACrC,cAsBI+B,EACPjI,SACEkI,IAAAA,MAAOhC,IAAAA,QAAYiC,8BAEhBpI,EAAcC,qBAfnBoI,IAAAA,mBAEQ3B,EAAazD,SAClB6D,EAASlE,MAAM2E,wBALlBN,cAMoBH,EAASlE,MAAMqE,aAChCH,EAASI,gBANZvH,UAMkD,MAAZ0I,GAUPC,CAAWF,QAElCzI,EAAsByI,EAAtBzI,QAAS0I,EAAaD,EAAbC,SACTzF,EAAyBkE,EAAzBlE,MACF2F,EAAa,kBAAMf,EAAY7H,IAC/B6I,IAAiBtB,EAFUJ,EAAlBI,eAEsBvH,GAEjC6I,GAAe7B,QPvIrB8B,EACAC,EOwIQV,EAAyB,CAC7BrI,QAAAA,EACA0I,SAAAA,EACAM,IAAKP,EAAQO,KAAO7B,EAASC,WAC7Bd,KAAMmC,EAAQnC,KACdsC,WAAYA,EACZK,YAAaR,EAAQQ,YACrBC,IAAKjG,EAAMiG,IACXnG,SAAU0F,EAAQ1F,UAAaE,EAAMF,SACrChB,WAAY0G,EAAQ1G,YAAekB,EAAMlB,WACzCoH,UAAWrJ,EAAe2I,EAAQU,WAAalG,EAAMmG,gBACrDC,cAAevJ,EACb2I,EAAQY,eAAiBpG,EAAMoG,eAEjCzH,MAAO6G,EAAQ7G,OAASqB,EAAMqG,WAC9BC,UAAWd,EAAQc,WAAatG,EAAMsG,UACtCC,QAASf,EAAQe,SAAWvG,EAAMuG,QAClCC,aAAc9J,EAAO8I,EAAQgB,cACzBhB,EAAQgB,aACRxG,EAAMwG,aACVC,iBAAkB/J,EAAO8I,EAAQiB,kBAC7BjB,EAAQiB,iBACRzG,EAAMyG,iBACVC,UAAWhK,EAAO8I,EAAQkB,WACtBlB,EAAQkB,UACR1G,EAAM0G,UACVC,iBAAkBpK,EAAMiJ,EAAQmB,kBAC5BnB,EAAQmB,iBACP3G,EAAM2G,iBACXC,aAAclK,EAAO8I,EAAQoB,cACzBpB,EAAQoB,aACR5G,EAAM4G,aACVC,kBAAmBhK,EACjB2I,EAAQqB,mBAAqB7G,EAAM6G,mBAErCC,cAAetB,EAAQsB,eAAiB9G,EAAM8G,cAC9CC,WP7KJlB,EO6KiCL,EAAQuB,UP5KzCjB,EO4KoD9F,EAAM+G,WP1KhC,IAAnBlB,GACJtJ,EAAMsJ,IAAmBA,EAAiB,EACzCA,EACAC,GOwKAkB,gBAAiBtK,EAAO8I,EAAQwB,iBAC5BxB,EAAQwB,gBACRhH,EAAMgH,gBACVC,SAAUzB,EAAQyB,SAClBC,KAAMvK,EAAM6I,EAAQ0B,MAAQ1B,EAAQ0B,KAAOlH,EAAMkH,KACjDC,iCAgE0BpK,UACrBkH,EAAWlH,GAClB0G,IAjEI2D,CAAqBrK,KAIrBH,EAAK4I,EAAQ6B,UAASjC,EAAWiC,OAAS7B,EAAQ6B,QAClDzK,EAAK4I,EAAQ8B,WAAUlC,EAAWkC,QAAU9B,EAAQ8B,aAEpDtB,EAAchG,EAAMgG,aAEI,IAAxBR,EAAQQ,aAAyB5I,EAAcoI,EAAQQ,aACzDA,EAAcR,EAAQQ,aACW,IAAxBR,EAAQQ,cACjBA,GAAc5I,EAAc4C,EAAMgG,cAAehG,EAAMgG,aAGzDZ,EAAWY,YAAcA,MAErBb,EAAe9H,EAEfC,iBAAeD,KAAaV,EAAMU,EAAQgG,MAC5C8B,EAAeoC,eAAalK,EAAS,CACnCsI,WAAAA,EACAP,WAAAA,IAEOxI,EAAKS,KACd8H,EAAe9H,EAAQ,CAAEsI,WAAAA,EAAYP,WAAAA,KAKrCpF,EAAM0E,OACN1E,EAAM0E,MAAQ,GACdX,EAAa/D,EAAM0E,OACnBkB,EAEA5B,EAAMhC,KAAK,CAAEmD,aAAAA,EAAcC,WAAAA,EAAY7B,QAAAA,IAC9BhH,EAAMgJ,IAAWA,EAAmB,EAC7CtG,YAAW,WACToG,EAAYF,EAAcC,EAAY7B,KACrCgC,GAEHF,EAAYF,EAAcC,EAAY7B,aAIjC8B,EACPhI,EACA+H,EACA7B,OAEQxG,EAAYqI,EAAZrI,QAERkH,EAAWlH,GAAW,CACpBM,QAAAA,EACA2C,MAAOoF,GAETvB,EAAS,CACPR,KAAM,MACNtG,QAAAA,EACAwG,QAAAA,WA7MJN,aAAU,kBACRiB,EAASG,YAAcrE,EAAMqE,YAC7BhD,EACGe,cACAX,KAAe6D,GACf7D,MAAgB,SAAA1E,UAAW+G,EAAazD,SAAWuE,EAAY7H,MAC/D0E,KAA4BgD,GAC5BhC,OAAqByB,GAEjB,kBAAM7C,EAAaoB,OAAwByB,MACjD,IAEHjB,aAAU,WACRiB,EAASI,cAAgBA,EACzBJ,EAASE,eAAiBR,EAAMhE,OAChCyB,EAAaoB,OAAmBmB,EAAMhE,OAAQI,EAAMqE,eACnD,CAACT,IAEJX,aAAU,WACRiB,EAASlE,MAAQA,KAwNZ,CACLwH,0BArBAtF,WAEMuF,EAA+B,GAC/BC,EAAY1H,EAAM2H,YACpBC,OAAOC,KAAK5D,GAAY6D,UACxBF,OAAOC,KAAK5D,GAEPgB,EAAI,EAAGA,EAAIyC,EAAU9H,OAAQqF,IAAK,KACnCrB,EAAQK,EAAWyD,EAAUzC,IAC3BnF,EAAa8D,EAAM5D,MAAnBF,SACR2H,EAAc3H,KAAc2H,EAAc3H,GAAY,IAEtD2H,EAAc3H,GAAWkC,KAAK4B,UAGxBgE,OAAOC,KAAKJ,GAAwCM,KAAI,SAAAC,UAC9D9F,EAAG8F,EAAGP,EAAcO,QAMtB/D,WAAAA,EACAH,aAAAA,EACAQ,cAAAA,GCzRJ,SAAS2D,EAAKC,UACLA,EAAEC,eAAiBD,EAAEC,cAAcvI,QAAU,EAChDsI,EAAEC,cAAc,GAAGC,QACnBF,EAAEE,iBASQC,EAASrI,SACWsI,YAAS,GAApCC,OAAWC,SACwCF,YAAS,GAA5DvI,OAAuB0I,OACxBC,EAAW1F,SAAuB,MAClC2F,EAAO/F,EAAqB,CAChCgG,MAAO,EACPjF,EAAG,EACHkF,EAAG,EACHC,OAAQ,EACRC,gBAAiB,EACjBC,iBAAiB,EACjBC,SAAS,EACTC,aAAc,OAEVC,EAAYvG,EAAU5C,GAAO,GAC3B+G,EAA+D/G,EAA/D+G,UAAWP,EAAoDxG,EAApDwG,aAAcb,EAAsC3F,EAAtC2F,WAAYY,EAA0BvG,EAA1BuG,QAASK,EAAiB5G,EAAjB4G,sBA4B7CwC,EACPlB,OAEMtE,EAAQ8E,EAASrI,QACvBsI,EAAKK,iBAAkB,EACvBL,EAAKM,SAAU,EACfN,EAAKO,aAAetF,EAAMyF,wBAC1BzF,EAAMjF,MAAMG,WAAa,GACzB6J,EAAKC,MAAQD,EAAKhF,EAAIsE,EAAKC,EAAEoB,aAC7BX,EAAKI,gBAAkBnF,EAAM2F,aAAevJ,EAAM2G,iBAAmB,cAG9D6C,OACHb,EAAKO,aAAc,OACgBP,EAAKO,aAGxClJ,EAAMwG,cACNmC,EAAKhF,KAJc8F,MAKnBd,EAAKhF,KALoB+F,OAMzBf,EAAKE,KANCc,KAONhB,EAAKE,KAPMe,OASXC,IAEAC,cAKGA,IACPtB,GAAa,YAGNqB,IACPrB,GAAa,YA6BNuB,EAAW7B,GAClBA,EAAE8B,qBAEIpG,EAAQ8E,EAASrI,QAEnBsI,EAAKM,UACHV,GAAWsB,IAEflB,EAAKhF,EAAIsE,EAAKC,GACdS,EAAKG,OAASH,EAAKhF,EAAIgF,EAAKC,MAC5BD,EAAKE,EA3HX,SAAcX,UACLA,EAAEC,eAAiBD,EAAEC,cAAcvI,QAAU,EAChDsI,EAAEC,cAAc,GAAG8B,QACnB/B,EAAE+B,QAwHOC,CAAKhC,GAGVS,EAAKC,QAAUD,EAAKhF,IAAGgF,EAAKK,iBAAkB,GAElDpF,EAAMjF,MAAMwL,wBAA0BxB,EAAKG,aAC3ClF,EAAMjF,MAAMyL,YAAa,EACvBC,KAAKC,IAAI3B,EAAKG,OAASH,EAAKI,4BAIzBwB,QACD3G,EAAQ8E,EAASrI,WACnBsI,EAAKM,QAAS,IAChBN,EAAKM,SAAU,EAEXoB,KAAKC,IAAI3B,EAAKG,QAAUH,EAAKI,uBAC/BN,GAAyB,QACzBzI,EAAM2F,aAIR/B,EAAMjF,MAAMG,WAAa,+BACzB8E,EAAMjF,MAAMwL,UAAY,gBACxBvG,EAAMjF,MAAMyL,QAAU,KA5H1BnH,aAAU,kBACJrG,EAAKoD,EAAMqH,SACbrH,EAAMqH,OAAO/J,iBAAe0C,EAAMH,WAAaG,EAAMH,SAASG,OAEzD,WACDpD,EAAKuM,EAAU7B,UACjB6B,EAAU7B,QACRhK,iBAAe6L,EAAUtJ,WAAasJ,EAAUtJ,SAASG,UAG9D,IAEHiD,aAAU,kBACRjD,EAAM0G,YA8DNxJ,SAASiE,iBAAiB,YAAa4I,GACvC7M,SAASiE,iBAAiB,UAAWoJ,GAErCrN,SAASiE,iBAAiB,YAAa4I,GACvC7M,SAASiE,iBAAiB,WAAYoJ,IAjE/B,WACLvK,EAAM0G,YAoERxJ,SAASoD,oBAAoB,YAAayJ,GAC1C7M,SAASoD,oBAAoB,UAAWiK,GAExCrN,SAASoD,oBAAoB,YAAayJ,GAC1C7M,SAASoD,oBAAoB,WAAYiK,OAtExC,CAACvK,EAAM0G,YAEVzD,aAAU,kBACRjD,EAAMyG,mBA6CNxJ,OAAOkE,iBAAiB,QAAS2I,GACjC7M,OAAOkE,iBAAiB,OAAQ0I,IA7CzB,WACL7J,EAAMyG,mBAgDRxJ,OAAOqD,oBAAoB,QAASwJ,GACpC7M,OAAOqD,oBAAoB,OAAQuJ,OA/ClC,CAAC7J,EAAMyG,uBAwGJ+D,EAA4C,CAChDC,YAAarB,EACbsB,aAActB,EACduB,UAAWnB,EACXoB,WAAYpB,UAGVzC,GAAaP,IACfgE,EAAcK,aAAehB,EAC7BW,EAAcM,aAAehB,GAI3BlD,IACF4D,EAAcjE,QAAU,SAAC2B,GACvB3B,GAAWA,EAAQ2B,GACnBS,EAAKK,iBAAmBrD,MAIrB,CACLmE,UAAAA,EACAD,WAAAA,EACAtB,UAAAA,EACAxI,sBAAAA,EACA2I,SAAAA,EACA8B,cAAAA,YCtMYO,SACdpF,IAAAA,eAEAqF,iBAGEzK,0BACE2F,UAAc,oDALlB7C,KAMIA,KAAK,SACLkD,QAAS,SAAA2B,GACPA,EAAE+C,kBACFtF,EAAWuC,4BARL,WAYR3H,qCAAiB,OAAO2K,QAAQ,aAC9B3K,wBACE4K,SAAS,UACTC,EAAE,wICmCIC,aAGd1F,IAAAA,WACAtC,IAAAA,KAEA6C,IAAAA,UAEAoF,IAAAA,mBACArE,IAAAA,SACAhB,IAAAA,IACAsF,IAAAA,KAEM5M,SANNA,OAQEmC,oBAdFyE,WAeEiG,qBAdFjD,UAckC,UAAY,SAC5C6B,UAZFqB,KAYkB,EAAI,IAGlBH,IAAoB3M,EAAMwL,oBAAsBlD,WAC9CyE,EAAkB,CACnB,yBACHJ,EACO,qCACA,mCACJ,2BAAwCjI,UAErC,+BAA6C4C,MAG/C0F,EAAa/O,EAAKsJ,GACpBA,EAAU,CACRD,IAAAA,EACA5C,KAAAA,EACAuI,iBAAkBC,eAAMH,KAE1BG,yBAAUH,GAAiBxF,KAKzB4F,UACHR,GAAsBrE,GAAa,EAChC,kBACA,kBACFqE,GAAsBrE,EAAY,EAC9B,KACA,WACEsE,GAAQ5F,eAIXpF,qCAAK2F,UAAWyF,EAAYhN,MAAOA,GAAWmN,IAGvDT,EAAYU,aAAe,CACzB1I,KAAMvF,EAAKK,QACXsN,MAAM,GCjHD,IAAMO,EAA8B,SAAAhM,WAMrCqI,EAASrI,GAJXuI,IAAAA,UACAxI,IAAAA,sBACA2I,IAAAA,SACA8B,IAAAA,cAGAxE,EAqBEhG,EArBFgG,YACAnG,EAoBEG,EApBFH,SACAkH,EAmBE/G,EAnBF+G,UACAR,EAkBEvG,EAlBFuG,QACAlD,EAiBErD,EAjBFqD,KACA2D,EAgBEhH,EAhBFgH,gBACArB,EAeE3F,EAfF2F,WACYnF,EAcVR,EAdFlB,WACAgB,EAaEE,EAbFF,SACAoG,EAYElG,EAZFkG,UACAvH,EAWEqB,EAXFrB,MACAyH,EAUEpG,EAVFoG,cACAE,EASEtG,EATFsG,UACAO,EAQE7G,EARF6G,kBACAC,EAOE9G,EAPF8G,cACArB,EAMEzF,EANFyF,SACAyB,EAKElH,EALFkH,KACAD,EAIEjH,EAJFiH,SACAhB,EAGEjG,EAHFiG,IACAlJ,EAEEiD,EAFFjD,QACAoK,EACEnH,EADFmH,YAEIuE,EAAkB,CACnB,kBACA,oBAAiCrI,UAE9B,wBAAsC4C,MAGxCgG,EAAarP,EAAKsJ,GACpBA,EAAU,CACRD,IAAAA,EACAnG,SAAAA,EACAuD,KAAAA,EACAuI,iBAAkBC,eAAMH,KAE1BG,yBAAUH,GAAiBxF,KACzBoF,IAAuBrE,SAY3B1G,gBAACC,MACKR,KACJkM,UACA3N,KAAM4I,EACNrH,SAAUA,EACVC,sBAAuBA,EACvBK,QAASsI,GAETnI,qCACE+C,GAAIvG,EACJwJ,QAASA,EACTL,UAAW+F,QAAcE,GACrB3B,GACJ7L,MAAOA,EACPoE,IAAK2F,IAELnI,uCACOP,MAAY,CAAEkH,KAAMA,IACzBhB,UACEtJ,EAAKwJ,GACDA,EAAc,CAAE/C,KAAAA,IAChBwI,EAAM,uBAAqCzF,GAEjDzH,MAAO2H,IAENzG,YAnCkBmG,MACpBA,OAEChG,EAAQ,CAAE2F,WAAAA,EAAYtC,KAAAA,UACxBzG,EAAKoJ,GAAqBA,EAAYhG,GACtCO,iBAAqByF,GAChBzF,eAAmByF,EAAahG,WA+BpCoM,CAAkBpG,IACjBe,GAAauE,IACb/K,gBAAC8K,mBACM5F,IAAa6F,EACd,CAAEvF,UAAWN,GACb,IACJQ,IAAKA,EACLV,MAAOwB,EACPwB,UAAWA,EACXgD,KAAMvL,KACN2F,WAAYA,EACZ8F,KAAMzE,EACN3D,KAAMA,EACN1E,MAAOmI,EACPZ,UAAWW,EACXyE,mBAAoBA,EACpBrE,SAAUA,QC1GhBoF,EAASnN,EAAc,CAC3BG,MAAU,yBACVC,KAAS,wBACTC,gBAAgB,IAGZ+M,EAAQpN,EAAc,CAC1BG,MAAU,wBACVC,KAAS,uBACTd,SAAU,CAAC,IAAK,KAChBe,gBAAgB,IAGZgN,EAAOrN,EAAc,CACzBG,MAAU,uBACVC,KAAS,wBAGLkN,EAAOtN,EAAc,CACzBG,MAAU,uBACVC,KAAS,wBChBEmN,EAAkD,gBAC7D5M,IAAAA,SACAqG,IAAAA,UACAvH,IAAAA,MACG+N,sDAIIA,KAGLnM,uBAAK2F,UAAWA,EAAWvH,MAAOA,GAC/B4B,WAAewH,IAAIlI,GAAU,SAAA8M,UAC5BpM,eAAmBoM,EAAkCD,QCDhDE,EAAgD,SAAA5M,SACDwD,EACxDxD,GADsCsE,IAAAA,cAGhC4B,EAAuClG,EAAvCkG,UAAWvH,EAA4BqB,EAA5BrB,MAAOsH,EAAqBjG,EAArBiG,WAGxB1F,uBACEwC,MAPsBe,aAQtBoC,UAAW,WACX5C,GAN2CtD,EAAhBqE,cAQ1BmD,IAXGA,mBAWc,SAAC1H,EAAU4H,WACrBmF,EAAO,CACX3G,UAAWtJ,EAAKsJ,GACZA,EAAU,CACRpG,SAAAA,EACAmG,IAAAA,EACA2F,iBAAkBC,EACb,4BACA,8BAA2C/L,UACxC,kCAAgDmG,QAG1D4F,EACK,4BACA,8BAA2C/L,UACxC,kCAAgDmG,KACtDpJ,EAAeqJ,IAErBvH,MACuB,IAArB+I,EAAU9H,YACDjB,GAAOmO,cAAe,cACtBnO,WAGX4B,gBAACkM,mBAAoBI,GAAM9G,iBAAkBjG,IAC1C4H,EAAUK,KAAI,gBAAG1K,IAAAA,QAAgB+H,IAAPpF,aAEvBO,gBAACyL,mBACK5G,MACAd,EAAcc,EAAWrI,SAC7BgJ,aAAcX,EAAWW,IACzBC,aAC6B,IAA3BZ,EAAWY,YACP+E,EACA3F,EAAWY,cAGhB3I,YAgDnBuP,EAAeb,aAAe,CAC5BjM,SAAUvC,EAASE,UACnBqB,WAAYuN,EACZpG,KAAK,EACLc,UAAW,IACXC,iBAAiB,EACjBhB,YAAa+E,EACbvE,cAAc,EACdC,kBAAkB,EAClBG,cAAc,EACde,aAAa,EACbjB,WAAW,EACXC,iBAAkB,GAClBO,KAAM,SCzGR,IACI6F,EACAC,EACAC,EAHAC,EAAa,IAAI3L,IAIjByC,EAAyB,GACzBmJ,GAAO,EAKX,SAASC,WACAF,EAAWG,KAAO,EAwB3B,SAASC,WACCjD,KAAKkD,SAASC,SAAS,IAAMC,KAAKC,MAAMF,SAAS,KAAKG,OAAO,EAAG,IAM1E,SAASC,EAAWpI,UACdA,IAAY7I,EAAM6I,EAAQzI,UAAYR,EAAMiJ,EAAQzI,UAC/CyI,EAAQzI,QAGVuQ,IAOT,SAASO,EACPxQ,EACAmI,UAEI4H,IACF/L,EAAaoB,OAAiBpF,EAASmI,IAEvCxB,EAAMhC,KAAK,CAAE3E,QAAAA,EAASmI,QAAAA,IAClB2H,GAAQnQ,IACVmQ,GAAO,EACPH,EAAmB9P,SAASC,cAAc,OAC1CD,SAAS4Q,KAAKC,YAAYf,GAC1BgB,SAAOzN,gBAACqM,mBAAmBK,IAAqBD,KAI7CxH,EAAQzI,QAMjB,SAASkR,EAAa5K,EAAcmC,eAE7BA,GACHnC,KAAOmC,GAAWA,EAAQnC,MAASA,EACnCtG,QAAS6Q,EAAWpI,KAIxB,IAAM5B,EAAQ,SAACvG,EAAuBmI,UACpCqI,EAAcxQ,EAAS4Q,EAAanQ,EAAKK,QAASqH,KAEpD5B,EAAMsK,QAAU,SAAC7Q,EAAuBmI,UACtCqI,EAAcxQ,EAAS4Q,EAAanQ,EAAKE,QAASwH,KAEpD5B,EAAMuK,KAAO,SAAC9Q,EAAuBmI,UACnCqI,EAAcxQ,EAAS4Q,EAAanQ,EAAKC,KAAMyH,KAEjD5B,EAAMwK,MAAQ,SAAC/Q,EAAuBmI,UACpCqI,EAAcxQ,EAAS4Q,EAAanQ,EAAKI,MAAOsH,KAElD5B,EAAMyK,QAAU,SAAChR,EAAuBmI,UACtCqI,EAAcxQ,EAAS4Q,EAAanQ,EAAKG,QAASuH,KAEpD5B,EAAM0K,KAAO,SAACjR,EAAuBmI,UACnCqI,EAAcxQ,EAAS4Q,EAAanQ,EAAKM,KAAMoH,KAKjD5B,EAAM2K,KAAO3K,EAAMyK,QAKnBzK,EAAM4K,QAAU,SAAClL,UACf8J,KAA2B/L,EAAaoB,OAAkBa,IAK5DM,EAAMa,kBAAoB,SAACgK,mBAAAA,IAAAA,EAAkC,IAC3DrB,KAA2B/L,EAAaoB,OAA8BgM,IAKxE7K,EAAM8K,SAAW,SAACpL,OACZgB,GAAgB,SAEpB4I,EAAW5K,SAAQ,SAAAqM,GACbA,EAAUrK,eAAiBqK,EAAUrK,cAAchB,KACrDgB,GAAgB,MAIbA,GAGTV,EAAMgL,OAAS,SAAC7R,EAAayI,YAAAA,IAAAA,EAAyB,IAGpDvG,YAAW,eACH2E,EAjHV,SAAkB7G,SARIsH,EASdsK,GATctK,IAQWA,YAP1B+I,IACEF,EAAWnL,IAAKsC,GAAc0I,GADA,aAShC4B,EAEEA,EAAUpK,SAASxH,GAFH,KA+GPwH,CAASxH,EAASyI,MAC5B5B,EAAO,KAC2BiL,EAAejL,EAAxBvG,QAErByR,OAF6ClL,EAA3C5D,MAIHwF,GACHzI,QAASyI,EAAQzI,SAAWA,EAC5B0I,SAAU6H,MAGRwB,EAAY/R,UAAYA,IAAS+R,EAAYvL,QAAUxG,OAErDM,OAC0B,IAAvByR,EAAYd,OACfc,EAAYd,OACZa,SACCC,EAAYd,OAEnBH,EAAcxQ,EAASyR,MAExB,IAMLlL,EAAMrF,KAAO,SAAC+E,GACZM,EAAMgL,OAAOtL,EAAI,CACf2D,SAAU,KAQdrD,EAAMmL,SAAW,SAACpN,UACZ/E,EAAK+E,IACPN,EAAaI,KAAiBE,GAEzB,WACL/E,EAAK+E,IAAaN,EAAaY,MAAkBN,KAOrDiC,EAAMoL,UAAY,SAACC,YAAAA,IAAAA,EAA8B,IAC/C9B,GAAO,EACPF,EAAkBgC,GAGpBrL,EAAMrG,SAAWA,EACjBqG,EAAM9F,KAAOA,EAMbuD,EACGI,MAAmB,SAACyN,GAEnBhC,EAAWpL,IADXiL,EAAiBmC,EAAkB7K,aAAe6K,EACnBA,GAE/BlL,EAAM1B,SAAQ,SAAA6M,GACZ9N,EAAaoB,OAAiB0M,EAAK9R,QAAS8R,EAAK3J,YAGnDxB,EAAQ,MAETvC,MAAsB,SAACyN,GACtBhC,SAAkBgC,EAAkB7K,aAAe6K,GAE3B,IAApBhC,EAAWG,MACbhM,EACGY,OACAA,OACAA,OAGDjF,GAAagQ,GACf9P,SAAS4Q,KAAKsB,YAAYpC"}